<?php
require_once('FortytwoAPI.php');
require_once('models/Destination.php');
require_once('models/SMSContent.php');
require_once('models/IMContent.php');


/**
 * Class FortytwoMessage
 * This class handles sending of SMS and IM
 *
 * For Simple Usage please use
 *  - sendSMS()
 *  - sendMultipleSMS()
 *  - sendIM()
 *  - sendMultipleIM()
 */
class FortytwoMessage extends FortytwoAPI {

    CONST _MESSAGE_API_PATH_ = 'im';

    public $body;
    public $headers;
    public $token;

    public $destinations;
    public $SMSContent;
    public $imContent;
    public $jobId;
    public $callbackUrl;
    public $ttl;
    public $message_plan;

    /**
     * Initialise an Object of type Message
     * Token must be added to the constructor
     * @param $token
     */
    public function  __construct($token) {
        $this->path = self::_MESSAGE_API_PATH_;
        $this->body = array();
        $this->token = $token;
        $this->addHeader('User-Agent','Fortytwo PHP SDK 1.0');
        $this->addHeader('Content-Type','application/json; charset=utf-8');
        $this->addHeader('Authorization','Token '.$this->token);

        parent::__construct();
    }

    /**
     * Adds a certain header to the REST request
     * @param $key
     * @param $value
     */
    public function addHeader($key,$value) {
        $this->headers[] =  $key.': '.$value;
    }
    /**
     * Add a destination into the message.
     * This is required for both SMS and IM.
     * @param Destination $destination
     */
    public function addDestination(Destination $destination) {
        $this->destinations[] = $destination;
    }

    /**
     * Set the SMS Content Object into the message.
     * This is required when sending an SMS
     * @param SMSContent $SMSContent
     */
    public function setSMSContent(SMSContent $SMSContent) {
        $this->SMSContent = $SMSContent;
    }

    /**
     * Set the IM Content Object into the message.
     * This is required when sending an IM
     * @param IMContent $imContent
     */
    public function addIMContent(IMContent $imContent) {
        $this->imContent[] = $imContent;
    }

    /**
     * Optional: Yes
     * Type: String
     * A job identification, generated by the client, which will be echoed back to the client in the callback, along with more information.
     * Maximum length of 255 characters.
     * @param $jobId
     */
    public function setJobId($jobId) {
        $this->jobId = $jobId;
    }

    /**
     * Optional: Yes
     * Type: String
     * If set, the callback (delivery / status report) will be delivered to this URL, else no callback will take place.
     * Must be a valid URL starting with http:// or https://. If https is used a valid signed certificate must be used.
     * @param $url
     */
    public function setCallbackUrl($url) {
        $this->callbackUrl = $url;
    }

    /**
     * Optional: Yes
     * Type: int
     * The validity period of the SMS.Default (when not supplied): 0 (up to route / network defaults)
     *    Value type: Number of seconds from now.
     *    Max value: No limit (fits signed integer)
     *    Min value: 0 (same as default)
     * @param $ttl
     */
    public function setTtl($ttl) {
        $this->ttl = $ttl;
    }

    /**
     * Optional: Yes
     * Type: Enum (FEATURE_RICH, LOW_COST)
     * Used only when im_content field has 1 or more records (optionally).Allowed values are:
     *    Enum	Description
     *        FEATURE_RICH	Priority for rich content.
     *        LOW_COST	Lowest cost for delivery, irrespective whether IM or SMS.
     *    Defaults to FEATURE_RICH if not specified.
     * @param $plan
     */
    public function setMessagePlan($plan) {
        $this->message_plan = $plan;
    }

    /**
     * Sends the Message
     * For SMS you must have
     *  - Token
     *  - Destination - use addDestination()
     *  - SMS Content - use setSMSContent()
     *
     * For IM you must have
     *  - Token
     *  - Destination - use addDestination()
     *  - IM Content - use addIMContent()
     *
     * @return bool
     * @throws Exception
     */
    public function send() {

        if(!$this->token) {
            //No Token - Do not continue
            return 'Please add a valid Token. Check out setToken()';
        }

        if(!$this->destinations) {
            //No Destination - Do not continue
            return 'Destination is missing. Check out setDestination()';
        }


        //Add Destination Information that was set from setDestination
        if($this->destinations && count($this->destinations)>0) {
            foreach($this->destinations as $destination) {
                //removes the empty properties and pass it along to json body
                $this->body['destinations'][] = array_filter((array) $destination);
            }
        }

        //Add SMS Content
        if($this->SMSContent) {
            $this->body['sms_content'] = array_filter((array)$this->SMSContent);
        }

        //Add IM Content
        if($this->imContent) {
            $this->body['im_content'] = array_filter((array)$this->imContent);
        }

        //Add Callback URL
        if($this->callbackUrl) {
            $this->body['callback_url'] = $this->callbackUrl;
        }

        //Add Job ID
        if($this->jobId) {
            $this->body['job_id'] = $this->jobId;
        }

        //Add TTL
        if($this->ttl) {
            $this->body['ttl'] = $this->ttl;
        }

        //Add Message Route (just for IM)
        if($this->message_plan) {
            $this->body['message_plan'] = $this->message_plan;
        }

        //Encode Parameters in JSON
        $this->body = json_encode( $this->body);

        //Send an API POST Request to the FortyTwo REST Server
        $request = $this->post($this->body,$this->headers);
        return $request;

    }

    /**
     * Sends a simple SMS to one destination
     * -- Check Documentation--
     * @param $number - Mobile number with prefix
     * @param $content - SMS Content (not more than 160 chars)
     * @param null $senderId - Optional Sender ID
     * @param null $route - Optional Route
     * @return bool
     */
    public function sendSMS($number,$content, $senderId = null, $route = null) {
        //Create the Actual Message Object
        $message = $this;

        //Create New Destination
        $destination = new Destination($number);

        //Create SMS Content
        $SMSContent = new SMSContent($content);

        if($senderId) {
            $SMSContent->setSenderId($senderId);
        }

        if($route) {
            $SMSContent->setRoute($route);
        }

        $message->addDestination($destination);
        $message->setSMSContent($SMSContent);

        //send the actual SMS
        $response = $message->send();
        return $response;
    }

    /**
     * Sends an SMS to multiple destinations
     * @param $numbers - Array of Mobile numbers with prefix
     * @param $content - SMS Content (not more than 160 chars)
     * @param null $senderId - Optional Sender ID
     * @param null $route - Optional Route
     * @return bool
     * @throws Exception
     */
    public function sendMultipleSMS($numbers = array(),$content, $senderId = null, $route = null) {
        //Create the Actual Message Object
        $message = $this;

        if(!is_array($numbers) && count($numbers) < 1) {
            throw new Exception('$numbers parameter must contain an array with numbers');
        } else {
            foreach($numbers as $number) {
                $destination = new Destination($number);
                $message->addDestination($destination);
            }
        }

        //Create SMS Content
        $SMS = new SMSContent($content);

        if($senderId) {
            $SMS->setSenderId($senderId);
        }

        if($route) {
            $SMS->setRoute($route);
        }
        $message->setSMSContent($SMS);

        //send the actual SMS
        $response = $message->send();
        return $response;
    }

    /**
     * Send Instant Message to one mobile phone
     * @param $number - Mobile number with prefix
     * @param $content - IM Message Content
     * @return bool
     * @throws Exception
     */
    public function sendIM($number,$content) {
        //Create the Actual Message Object
        $message = $this;

        //Create New Destination
        $destination = new Destination($number);

        //Create IM Content
        $imContent = new IMContent($content);


        $message->addDestination($destination);
        $message->addIMContent($imContent);

        //send the actual im
        $response = $message->send();
        return $response;
    }

    /**
     * Send Instant Message to many mobile phones
     * @param $numbers - Array of Mobile numbers with prefix
     * @param $content - IM Message Content
     * @return bool
     * @throws Exception
     */
    public function sendMultipleIM($numbers = array(),$content) {
        //Create the Actual Message Object
        $message = $this;

        if(!is_array($numbers) && count($numbers) < 1) {
            throw new Exception('$numbers parameter must contain an array with numbers');
        } else {
            foreach($numbers as $number) {
                $destination = new Destination($number);
                $message->addDestination($destination);
            }
        }

        //Create IM Content
        $imContent = new IMContent($content);
        $message->addIMContent($imContent);

        //send the actual im messages
        $response = $message->send();
        return $response;
    }

    /**
     * Send IM VIBER Message with SMS Fallback to a Single Destination
     * @param $number
     * @param $content
     * @param $SMSContent
     * @param $cheapestFirst - If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used (by Default set to FALSE)
     * @param null $senderId
     * @param null $route
     * @return bool
     */
    public function sendInstantMessageOrSMS($number,$content,$SMSContent, $cheapestFirst = false, $senderId = null, $route = null) {
        //Create the Actual Message Object
        $message = $this;

        //Create New Destination
        $destination = new Destination($number);
        $message->addDestination($destination);

        //Create IM Content
        $imContent = new IMContent($content);
        $message->addIMContent($imContent);

        //Create SMS Content
        $SMS = new SMSContent($SMSContent);

        if($senderId) {
            $SMS->setSenderId($senderId);
        }

        if($route) {
            $SMS->setRoute($route);
        }
        $message->setSMSContent($SMS);

        // If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used
        if($cheapestFirst) {
            $message->setMessagePlan('LOW_COST');
        } else {
            $message->setMessagePlan('FEATURE_RICH');
        }

        //send the actual im messages
        $response = $message->send();
        return $response;
    }


    /**
     * Send IM VIBER Message with SMS Fallback to Multiple Destinations
     * @param array $numbers
     * @param $content
     * @param $SMSContent
     * @param $cheapestFirst - If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used (by Default set to FALSE)
     * @param null $senderId
     * @param null $route
     * @return bool
     * @throws Exception
     */
    public function sendMultipleInstantMessageOrSMS($numbers = array(),$content, $SMSContent, $cheapestFirst = false, $senderId = null, $route = null) {
        //Create the Actual Message Object
        $message = $this;

        if(!is_array($numbers) && count($numbers) < 1) {
            throw new Exception('$numbers parameter must contain an array with numbers');
        } else {
            foreach($numbers as $number) {
                $destination = new Destination($number);
                $message->addDestination($destination);
            }
        }

        //Create IM Content
        $imContent = new IMContent($content);
        $message->addIMContent($imContent);


        //Create SMS Content
        $SMS = new SMSContent($SMSContent);

        if($senderId) {
            $SMS->setSenderId($senderId);
        }

        if($route) {
            $SMS->setRoute($route);
        }

        $message->setSMSContent($SMS);


        // If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used
        if($cheapestFirst) {
            $message->setMessagePlan('LOW_COST');
        } else {
            $message->setMessagePlan('FEATURE_RICH');
        }


        //send the actual im message with SMS fallbacks
        $response = $message->send();
        return $response;
    }

    /**
     * Send a more customised/complex SMS Message
     * @param $destinations (Array of objects of type Destination)
     * @param SMSContent $SMSContent
     * @return bool
     * @throws Exception
     */
    public function sendComplexSMS($destinations, SMSContent $SMSContent) {
        $message = $this;

        if(!is_array($destinations) && count($destinations) < 1) {
            throw new Exception('$destinations parameter must contain an array with numbers');
        } else {
            foreach($destinations as $destination) {
                $message->addDestination($destination);
            }
        }

        $message->setSMSContent($SMSContent);

        //send the actual SMS
        $response = $message->send();
        return $response;
    }

    /**
     * Send a more customised/complex IM Message via VIBER
     * @param $destinations (Array of objects of type Destination)
     * @param IMContent $imContent
     * @return bool
     * @throws Exception
     */
    public function sendComplexIM($destinations, IMContent $imContent) {
        $message = $this;

        if(!is_array($destinations) && count($destinations) < 1) {
            throw new Exception('$destinations parameter must contain an array with numbers');
        } else {
            foreach($destinations as $destination) {
                $message->addDestination($destination);
            }
        }

        $message->addIMContent($imContent);

        //send the actual SMS
        $response = $message->send();
        return $response;
    }

    /**
     * Send a more customised/complex IM Message with an SMS fallback (just in case VIBER IM fails)
     * @param array $destinations (Array of objects of type Destination)
     * @param IMContent $imContent
     * @param SMSContent $SMSContent
     * @param $cheapestFirst - If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used
     * @return bool
     * @throws Exception
     */
    public function sendComplexInstantMessageOrSMS($destinations, IMContent $imContent, SMSContent $SMSContent, $cheapestFirst = false) {
        $message = $this;

        if(!is_array($destinations) && count($destinations) < 1) {
            throw new Exception('$destinations parameter must contain an array with numbers');
        } else {
            foreach($destinations as $destination) {
                $message->addDestination($destination);
            }
        }

        $message->addIMContent($imContent);
        $message->setSMSContent($SMSContent);

        // If this is set to 'TRUE' and SMS is cheaper than IM, then SMS would be used
        if($cheapestFirst) {
            $message->setMessagePlan('LOW_COST');
        } else {
            $message->setMessagePlan('FEATURE_RICH');
        }

        //send the actual SMS
        $response = $message->send();
        return $response;
    }

    /**
     * Post a JSON Object directly to REST API SERVER
     * Check website for Request Body examples
     * @param $jsonBody
     * @return mixed
     * @throws Exception
     */
    public function postData($jsonBody) {
        $request = $this->post($jsonBody,$this->headers);
        return $request;
    }


}